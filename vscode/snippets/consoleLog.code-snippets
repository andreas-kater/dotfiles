{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "react": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "comp",
    "body": [
      "import React from \"react\"",
      "import styled from 'styled-components';",
      "",
      "const $1 = () => {",
      "  return (",
      "    <Container>",
      "      $2",
      "    </Container>",
      "  )",
      "}",
      "",
      "export default $1",
      "",
      "const Container = styled.div`",
      "  display:flex;",
      "`"
    ],
    "description": "React component template"
  },
  "useState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "us",
    "body": [
      "const [value,setValue] = useState($1)"
    ],
    "description": "React useState template"
  },
  "onClick": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "oc",
    "body": [
      "onClick={handleClick}",
    ],
    "description": "onClick"
  },
  "handleClick": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "hc",
    "body": [
      "const handleClick = async()=>{",
      "  $1",
      "}"
    ],
    "description": "handleClick"
  },
  "console log": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "l",
    "body": [
      "console.log(`$1`)",
    ],
    "description": "Log output to console"
  },
  "reduce": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ".red",
    "body": [
      ".reduce((acc,cur)=>{",
      "  $1",
      "  return acc",
      "},{})",
    ],
    "description": "reduce function"
  },
  "use_strict": {
    "scope": "javascript,typescript",
    "prefix": "use",
    "body": [
      "'use strict'",
      "",
      ""
    ],
  },
  "arrow_function": {
    "scope": "javascript,typescript",
    "prefix": ["af","()"],
    "body": [
      "($1)=>{$0}",
    ],
  },
  "styled_div": {
    "scope": "javascript,typescript",
    "prefix": "sd",
    "body": [
      "const $1 = styled.div`",
      "  $2",
      "`",
    ],
  },
  "useDispatch": {
    "scope": "javascript,typescript",
    "prefix": "dis",
    "body": [
      "const dispatch = useDispatch()",
    ],
  },
  "useHistory": {
    "scope": "javascript,typescript",
    "prefix": "his",
    "body": [
      "const history = useHistory()",
    ],
  },
  "styled div": {
    "scope": "javascript,typescript",
    "prefix": "sd",
    "body": [
      "<div",
      "    style={{",
      "        display:'flex',",
      "        $1,",
      "    }}",
      ">",
      "    $2",
      "</div>",
    ],
  },
  "anonymous_function": {
    "scope": "javascript,typescript",
    "prefix": "fn",
    "body": [
      "function ($1) {$0}",
    ],
  },
  "if": {
    "scope": "javascript,typescript",
    "prefix": "if",
    "body": [
      "if ($1) {$0}",
    ],
  },
  "for": {
    "scope": "javascript,typescript",
    "prefix": "for",
    "body": [
      "for ($1) {$0}",
    ],
  },
  "while": {
    "scope": "javascript,typescript",
    "prefix": "while",
    "body": [
      "while ($1) {$0}",
    ],
  },
  "test": {
    "scope": "javascript,typescript",
    "prefix": "test",
    "body": [
      "test('$1',()=>{$0})",
    ],
  },
  "try --> catch": {
    "scope": "javascript,typescript",
    "prefix": "try",
    "body": [
      "try {",
			"	$1",
      "} catch (err) {console.log(err) }",
      "$0",
    ],
  },
  "require": {
    "scope": "javascript,typescript",
    "prefix": [
      "re",
      "req"
    ],
    "body": [
      "const $1 = require('$1')",
    ],
  },
  "require_fs": {
    "scope": "javascript,typescript",
    "prefix": "fs",
    "body": [
      "const fs = require('fs')",
      "$0"
    ],
  },
  "if main": {
    "scope": "python",
    "prefix": "main",
    "body": [
      "if __name__ == '__main__':",
      "    "
    ],
    "description": "if __name__ = 'main':"
  },
  "magic": {
    "scope": "python",
    "prefix": "_",
    "body": [
      "__$1__",
    ],
    "description": "__magic__"
  },
  "list(map": {
    "scope": "python",
    "prefix": "lm",
    "body": [
      "list(map(lambda $1))",
    ],
    "description": "list(map(lambda $1))"
  },
  "init": {
    "scope": "python",
    "prefix": "init",
    "body": [
      "def __init__(self):",
      "    "
    ],
    "description": "def __init__(self):"
  },
  "print": {
    "scope": "python",
    "prefix": "p",
    "body": [
      "print($0)"
    ],
    "description": "print()"
  },
  "pprint": {
    "scope": "python",
    "prefix": "pp",
    "body": [
      "from pprint import pprint"
    ],
    "description": "from pprint import pprint"
  },
  "pandas": {
    "scope": "python",
    "prefix": "pd",
    "body": [
      "import pandas as pd"
    ],
    "description": "import pandas as pd"
  }
}